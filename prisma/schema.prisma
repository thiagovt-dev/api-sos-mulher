generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CITIZEN
  POLICE
  ADMIN
}

model User {
  id           String  @id @default(uuid())
  email        String? @unique
  username     String? @unique
  passwordHash String?
  roles        Role[]

  unit    Unit?
  citizen CitizenProfile?

  devices Device[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum IncidentStatus {
  OPEN
  IN_DISPATCH
  RESOLVED
  CANCELED
}

enum DispatchStatus {
  PENDING
  NOTIFIED
  ACCEPTED
  REJECTED
  CANCELED
}

enum IncidentEventType {
  CREATED
  DISPATCH_CREATED
  PUSH_SENT
  UNIT_ACCEPTED
  STATUS_CHANGED
  VOICE_JOIN_ISSUED
  VOICE_ROOM_CLOSED
}

model Incident {
  id          String         @id @default(uuid())
  code        String         @unique
  description String? // opcional (MVP)
  lat         Decimal        @db.Decimal(9, 6)
  lng         Decimal        @db.Decimal(9, 6)
  address     String?
  status      IncidentStatus @default(OPEN)
  audioRoomId String? // reservado para Sprint 3 (voz)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  dispatches Dispatch[]
  events     IncidentEvent[]

  @@index([status, createdAt])
}

model Unit {
  id   String @id
  user User   @relation(fields: [id], references: [id])

  name   String
  plate  String?
  active Boolean @default(true)

  fcmToken   String?
  lastLat    Decimal?
  lastLng    Decimal?
  lastSeenAt DateTime?

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Dispatch  Dispatch[]
  Device    Device[]
}

model CitizenProfile {
  userId String @id
  user   User   @relation(fields: [userId], references: [id])

  phone    String
  street   String?
  number   String?
  district String?
  city     String?
  state    String?
  zip      String?
  lat      Decimal?
  lng      Decimal?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Dispatch {
  id         String @id @default(uuid())
  incidentId String
  unitId     String //User.id (POLICE)

  incident Incident @relation(fields: [incidentId], references: [id])
  unit     Unit     @relation(fields: [unitId], references: [id])

  status     DispatchStatus @default(PENDING)
  notifiedAt DateTime?
  acceptedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IncidentEvent {
  id         String            @id @default(uuid())
  incidentId String
  type       IncidentEventType
  payload    Json?
  createdAt  DateTime          @default(now())

  incident Incident @relation(fields: [incidentId], references: [id], onDelete: Cascade)

  @@index([incidentId, createdAt])
}

enum DevicePlatform {
  ANDROID
  IOS
  WEB
}

model Device {
  id         String         @id @default(uuid())
  unitId     String?
  userId     String?
  platform   DevicePlatform
  token      String         @unique
  deviceId   String?
  appVersion String?
  active     Boolean        @default(true)
  lastSeenAt DateTime?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  unit Unit? @relation(fields: [unitId], references: [id], onDelete: SetNull)
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([unitId])
  @@index([userId])
}
